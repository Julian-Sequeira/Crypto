import React from 'react';
import { AsyncStorage } from 'react-native';

const GlobalContext = React.createContext({});

export class GlobalContextProvider extends React.Component {

    state = {
        username: null,
        userDetails: null,
        recipient: null,
        canSendBalance: false,
        canSendTxHist: false,
    }

    updateCanSendBalance = () => {
        this.setState({ canSendBalance: true });
    }

    updateCanSendTxHist =  () => {
        this.setState({ canSendTxHist: true });
    }

    updateDetails = async ( key ) => {
        const data = await AsyncStorage.getItem(key);
        this.setState({ username: key });
        this.setState({ userDetails: data });
    }

    updateRecipient = (recipient) => {
        this.setState({ recipient });
    }

    getMockBalance = () => {
        const { canSendBalance } = this.state;
        if (canSendBalance) {
            return 494;
        } else {
            return 500;
        }
    }

    getMockTx = () => {
        return {
            "data":{
                "publicKey":"2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494943496a414e42676b71686b6947397730424151454641414f43416738414d49494343674b434167454174356a74414b617a586468684b56676c457849300a424153466b78637956574f4e59416b726c2f4b765232464f4c4c71345a4f376c3134732b46354b5157324d4e7942357a3374656f516e6e4c53304633335858710a34474f66445376366c464b7a636638776f304d644b76686770534d6e56582b6a7a564470435a426c396c4d5072726b51667a42632f666f4332756164695277730a7a4e67575468463046705358636d394a627a7a73716e3334536b42726b6b53576c61786342664449364564624f6433335558466e66553455677a68664735372b0a31547367385434326d6751694c4d5471434e5431495070664c7837663370446a5a43624e44526634622f346248347848413634412f34634d2f3530662b4e45680a6367364233694c48516c4835557a62576842644e5253753079564a5867334d687763547368392f7a34674c6d326d79454c57326545646c38386242496c4666440a50553663444f2f37774a62636f50586d75396d4e7656304a697867427068624f574467507749466c46526171586a695a434a7336782b372f6879545262796f440a506b547279346a65756d5a6a5947794c6675496263425a424f30353037684d33656b61335a3363714d6b39506a744765676b73333677422b4e6a79766b4238460a7678715a62304938456d554d635371717362304369377946434a54344b54775a79696c756d366455727a754d5558723437465a78372f6a2f5a6e616749744e670a6a666a2f46683134317046485059464a4a643934584b484e4d2b564c2f4d654b385475486871474b6b6e41384f497565726e2b767943676a596d33597a3354470a514743516e6e665779684379622b3446564c5a7764646545696347387656413150766f774e57736449615363536831305a4e7575594b6d415478566c627058380a36436f4b3149797a74334556664a324c53494956304430434177454141513d3d0a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a",
                "previous":[
                    {
                        "previousID":"b303a60d2faf595f35c8953ec17098b5303358225c8732c1efe896dceadb64a9",
                        "previousIdx":0
                    }
                ],
                "fee":1,
                "recipients":[
                    {
                        "index":0,
                        "address":"2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494943496a414e42676b71686b6947397730424151454641414f43416738414d49494343674b4341674541736a494c70706f6b725a736248414946335253350a564933366c2f6c4c6e6564434e7770566f7257504b79536e4f72332f563068474d43616735546461554a424159624f6a77784b71442b6c47485668566a472f420a3472474167746c4d2b47624c6c70624949376b376b746b7554734b73486f364c79323834324a4e78755a58744b4c41337633534c614d6f79576f4b4e6e507a550a77336d4e763961657438345746486e4c6a33556f72377a6a697666644a586762676361522f4d672f6d6d34437a6c63396749747158536d6a3054444c32756a560a6b4a5831706368737a7a6c38513777557663497458704d47366e64435752696c4e4a392f4e716f42396c312b5155324c646f7564504e52454e685643517a63520a7870324e6233302f414c75516d427871505a44726274652f5476705742306a6b543749663055706d356872574d31644669716d424a334c3854506e51476f78720a596e427378486b6e6c687a663359436941656849333633326c2f72696c333754636651717a6f34304630706e566a316c70365531616245545451476977374c4e0a32352b546e57643132773444732f484748504731352f425a435769557941376841467667504d35766a4553542b74596c79466e6c61396c5068532f456c736f610a38564c55345a4745756479694d6830426b6771575372454a7864427733586e36365370776361594774435a655439767864352f56663071304f756138466444560a71426c5534434f4243674861345738363961306248446e5978316f47465a6c5a4e55374455737274675a653179316635534a72537a4d646b31774f5a6b4130570a5947615255366570714b623734577174537632476a49643567725146496d44445739676a6f55356b6149686c646836315153573376416d7266493179666a4e640a453633652f6f666e796f305073774439455a414d752f63434177454141513d3d0a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a",
                        "amount":5
                    }
                ],
                "type":"normal",
                "timestamp":1585781713562
            },
            "id":"2f3fffec06370154334c0b218c59d426b727f550c63799ca4067490444c5395b",
            "signature":"873732afc155a63d746a0398f2f45f1084ee99f799c3b794ae6f8504abe79d6a0389b869bc2eb97ea3600ac8c5300abf01b49f5c4e35b1986a5537ecaf4e532aca647245cadf2b718bc0e224485f5b9a0c9913ecaec07f94f0a19e137d99ad7f1d1c4c1e6de56c34def60da2aad464a6b484192ec4be93ccaf41659656045d3339c7770f1855097842ddcbfe141639050181011c813bca69178bdcf3ac9c2e72773b7feed9f7e7bfcbe6d1c8f9b852d8fe045a4d4637d6a794726351b624528544c723ad564973309667606907cdd5f6bd109078efb9dec189bc9a838c4d06ab71de1505df6bae3a641dc296664067f73f54e8d6d2988c2d4ff70120f8e1ba76c7a7ab6314e5e42a2dcd7e69e35d09ca3f227773dd2880d5c56f52f5a2e0c9092318568940c0f6410a116b489c0622e6dfb33a5a71c1d64f4efa5e705ff037b7f2eb1b6355422f9b30b1f4039ab2e8f9f95c24bdf16b6d82c2358cfe9af1de3d5b164e1528c4b5f9d15f3dc85dd2a7ac838276a6174407c064babc08bfabddb7f132ef4ad92340925ccaecb42e57eb6067a69639cdb9238ef1879959a00682b353bb4b2d39a7c7d144d095c27e4bd19a0d823defef99af31f414df615b9e97da6339b8e119301f238ef53c906ceadc2bed23f388c0183bcd1f40f5f9c63d6ec90aa8be320b67c2718479c656e3937f41956db6624d12bc2669c2423cd02c137f"
        }
    }

    getMockTxList = () => {
        return {
            sender: "2d2d2d2d2d424547494e205055424c4943204b455...",
            amount: "5",
            date: "04/01/2020",
        }
    }

    render () {
        return (
            <GlobalContext.Provider
                value={{
                    ...this.state,
                    updateDetails: this.updateDetails,
                    updateRecipient: this.updateRecipient,
                }}
            >
                {this.props.children}
            </GlobalContext.Provider>
        )
    }
}

export const withGlobalContext = ChildComponent => props => (
    <GlobalContext.Consumer>
        {
            context => <ChildComponent {...props} global={context}/>
        }
    </GlobalContext.Consumer>
);